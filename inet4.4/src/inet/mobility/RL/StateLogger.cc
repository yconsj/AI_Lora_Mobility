//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#include "StateLogger.h"
#include <omnetpp.h>
#include <iostream>
#include "modelfiles/policy_net_model.h"

namespace inet {

Define_Module(StateLogger);

StateLogger::StateLogger() {
    // TODO Auto-generated constructor stub
}

void StateLogger::initialize() {
    inputStateArray.clear(); // Clear any previous data (if needed)
    choiceArray.clear();
    rewardArray.clear();
    runnumber = getSimulation()->getActiveEnvir()->getConfigEx()->getActiveRunNumber();

}


void StateLogger::logStep(InputStateBasic& inputState, int choice, double reward) {
    inputStateArray.push_back(inputState);
    choiceArray.push_back(choice);
    rewardArray.push_back(reward);
}


void StateLogger::writeToFile() {
    runnumber = getSimulation()->getActiveEnvir()->getConfigEx()->getActiveRunNumber();

    if (runnumber < 0) {
        cRuntimeError("failed to fetch runnumber");
    }
    // Construct the filename based on the current runnumber
    std::string filename = std::string(log_file_basename) + "_" + std::to_string(runnumber) + ".txt";
    std::ofstream outFile(filename);

    if (outFile.is_open()) {
        // Write inputStateArray (InputStateBasic)
        outFile << "[";  // Start of inputState array
        if (!inputStateArray.empty()) {
            for (size_t i = 0; i < inputStateArray.size(); ++i) {
                const InputStateBasic& state = inputStateArray[i];
                outFile << "("
                        << state.gwPosition.x << ", "
                        << state.gwPosition.y << ", "
                        << state.stampPos1.x << ", "
                        << state.stampPos1.y << ", "
                        << state.stampPos2.x << ", "
                        << state.stampPos2.y << ", "
                        << state.timestamp1 << ", "
                        << state.timestamp2 << ", "
                        << state.numReceivedPackets << ")";
                if (i < inputStateArray.size() - 1) outFile << ", ";
            }
        }
        outFile << "]\n";  // End of inputState array

        // Write choice array
        outFile << "[";
        if (!choiceArray.empty()) {
            for (size_t i = 0; i < choiceArray.size(); ++i) {
                outFile << choiceArray[i];
                if (i < choiceArray.size() - 1) outFile << ", ";
            }
        }
        outFile << "]\n"; // End of choice array

        // Write reward array
        outFile << "[";
        if (!rewardArray.empty()) {
            for (size_t i = 0; i < rewardArray.size(); ++i) {
                outFile << rewardArray[i];
                if (i < rewardArray.size() - 1) outFile << ", ";
            }
        }
        outFile << "]\n";

        outFile.close();
    } else {
        EV << "Error opening file to write log data.\n";
    }
}


void StateLogger::finish() {
    writeToFile();
}


StateLogger::~StateLogger() {
    //autogenerated stub for destructor
}

} /* namespace inet */
